# cd home/hank/dev/OGL/Shaper/src
# cmake -G"Visual Studio 15 2017" ..

CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT (Shaper)

FIND_PACKAGE(OpenGL REQUIRED)

ADD_EXECUTABLE(${PROJECT_NAME}
	src/main.cpp
)

# Includes (.h) ----------------------------------

TARGET_INCLUDE_DIRECTORIES( ${PROJECT_NAME} PUBLIC
	${PROJECT_SOURCE_DIR}/../3D_visualizer/hans_visual/src
	${PROJECT_SOURCE_DIR}/../3D_visualizer/extern/glfw/glfw-3.3/include
	${PROJECT_SOURCE_DIR}/../3D_visualizer/extern/glew/glew-2.1.0/include
	${PROJECT_SOURCE_DIR}/../3D_visualizer/extern/glm/glm-0.9.9.5
#	${PROJECT_SOURCE_DIR}/../../boost_1_70_0
)	

# Libraries (.a) ---------------------------------

# Needed for Boost library. If we, instead, do this with FILE(GLOB...) -> TARGET_INCLUDE_DIRECTORIES(...), debug and release libs will be mixed and compiler will be confused.
TARGET_LINK_DIRECTORIES( ${PROJECT_NAME} PUBLIC
	../../boost_1_70_0/_BUILD/lib
)

TARGET_LINK_LIBRARIES( ${PROJECT_NAME} 
	optimized	${OPENGL_LIBRARY} 
	optimized	${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/hans_visual/Release/hans_visual.lib
	optimized	${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/extern/glfw/glfw-3.3/src/Release/glfw3.lib
	optimized	${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/lib/Release/libglew32.lib
	optimized	${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/extern/glm/glm-0.9.9.5/glm/Release/glm_static.lib
#	optimized	Boost library
)

TARGET_LINK_LIBRARIES( ${PROJECT_NAME} 
	debug		${OPENGL_LIBRARY} 
	debug		${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/hans_visual/Debug/hans_visual.lib
	debug		${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/extern/glfw/glfw-3.3/src/Debug/glfw3.lib
	debug		${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/lib/Debug/libglew32d.lib
	debug		${PROJECT_SOURCE_DIR}/../3D_visualizer/_BUILD/extern/glm/glm-0.9.9.5/glm/Debug/glm_static.lib
)